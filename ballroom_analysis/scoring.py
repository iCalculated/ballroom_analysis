# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_scoring.ipynb.

# %% auto 0
__all__ = ['SCORES', 'PLACE_VALUE', 'CALLBACK_VALUE', 'INT', 'score', 'score_result']

# %% ../nbs/01_scoring.ipynb 2
from .scraping import Result, Event

# %% ../nbs/01_scoring.ipynb 3
SCORES = [30, 25, 20, 15, 10, 5, 0, 0]
PLACE_VALUE = 35
CALLBACK_VALUE = 3 
INT = type(0)

def score(data):
    # single-event
    if type(data[0]) == INT:
        print("detected single-event")
        data = [data]

    # event-wise
    if len(data[0]) == 3:
        print("calculating event-wise score")
        return sum(SCORES[place-1] * mult + callbacks * 3 for (place, mult, callbacks) in data)
    # matrix
    else:
        print("calculating overall score")
        placements, mults, callbacks = data
        callback_contrib = (callbacks if type(callbacks) == INT else sum(callbacks)) * CALLBACK_VALUE 
        placement_contribs =  sum([SCORES[place - 1] * mult for (place, mult) in zip(placements, mults)])
        return callback_contrib + placement_contribs

score([1,3,2])

# %% ../nbs/01_scoring.ipynb 4
def score_result(result: Result) -> float:
    return result.num_dances * (result.callbacks + 1) * CALLBACK_VALUE \
        + result.num_dances * (PLACE_VALUE - 5 * (result.placement or 7))
