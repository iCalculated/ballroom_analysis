[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core (demo module)",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "core (demo module)"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ballroom_analysis",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "ballroom_analysis",
    "section": "Install",
    "text": "Install\npip install ballroom_analysis",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "ballroom_analysis",
    "section": "How to use",
    "text": "How to use\nFill me in please! Donâ€™t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "scoring.html",
    "href": "scoring.html",
    "title": "scoring",
    "section": "",
    "text": "source\n\nscore\n\n score (data)\n\n\n\n\nscore_result\n\n score_result (result:ballroom_analysis.scraping.Result)",
    "crumbs": [
      "scoring"
    ]
  },
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "ballroom_analysis",
    "section": "",
    "text": "SCORES = [30, 25, 20, 15, 10, 5, 0, 0]\nCALLBACK_VALUE = 3 \nINT = type(0)\n\ndef score(data):\n    # single-event\n    if type(data[0]) == INT:\n        print(\"detected single-event\")\n        data = [data]\n\n    # event-wise\n    if len(data[0]) == 3:\n        print(\"calculating event-wise score\")\n        return sum(SCORES[place-1] * mult + callbacks * 3 for (place, mult, callbacks) in data)\n    # matrix\n    else:\n        print(\"calculating overall score\")\n        placements, mults, callbacks = data\n        callback_contrib = (callbacks if type(callbacks) == INT else sum(callbacks)) * CALLBACK_VALUE \n        placement_contribs =  sum([SCORES[place - 1] * mult for (place, mult) in zip(placements, mults)])\n        return callback_contrib + placement_contribs\n\n\n\nscore([1,3,2])\n\ndetected single-event\ndetected event-wise data\n\n\n96\n\n\n\ntype(0)\n\ntype"
  },
  {
    "objectID": "scraping.html",
    "href": "scraping.html",
    "title": "scraping",
    "section": "",
    "text": "parse_event_name\n\n parse_event_name (event_name)\n\n\n\n\nEvent\n\n Event (division:str, level:str, event:str, number:int)\n\n\n\n\nget_event_list_html\n\n get_event_list_html (name:str)\n\n\n\n\nget\n\n get (url, **kwargs)\n\n\n\n\nextract_events_from_html\n\n extract_events_from_html (soup:bs4.BeautifulSoup)\n\n\n\n\nResult\n\n Result (callbacks:int, placement:float|None, num_dances:int=1)\n\n\n\n\nextract_num_dances\n\n extract_num_dances (soup:bs4.BeautifulSoup)\n\n\n\n\nextract_placement\n\n extract_placement (soup:bs4.BeautifulSoup, name:str, verbose=False)\n\nassumes that soup is a finals page\n\n\n\nextract_max_callbacks\n\n extract_max_callbacks (soup:bs4.BeautifulSoup)\n\n\nurl = \"https://results.o2cm.com/scoresheet3.asp?event=usa24&heatid=40423019\"\nname = \"Khalid Ali\"\n\ninitial_res = get(url)\nsoup = BeautifulSoup(initial_res.content, \"html.parser\")\n\nextract_placement(soup, name)\n\n3.5\n\n\n\n\n\nget_event_result\n\n get_event_result (name:str, url:str)",
    "crumbs": [
      "scraping"
    ]
  },
  {
    "objectID": "scratch.html",
    "href": "scratch.html",
    "title": "ballroom_analysis",
    "section": "",
    "text": "from ballroom_analysis.scoring import *\nfrom ballroom_analysis.scraping import *\n\nAmateur Collegiate Gold Standard\nAmateur Collegiate Silver Rhythm\nAmateur Collegiate Gold Rhythm\nAmateur Adult Silver Rhythm\nAmateur Collegiate Silver Standard\nAmateur Collegiate Silver Intl. Tango\nAmateur Collegiate All Syllabus Standard\nAmateur Adult Silver Intl. V. Waltz\nAmateur Adult Silver Standard\nAmateur Adult Silver Intl. Tango\nAmateur Collegiate Silver Smooth\nAmateur Adult Gold Smooth\nAmateur Collegiate Gold Smooth\nAmateur Adult Novice Smooth\nAmateur Adult Silver Latin\nAmateur Collegiate Silver Latin\nAmateur Collegiate Bronze Latin\nAmateur Adult Bronze 1 Latin\nAmateur Adult Bronze Latin\ndetected single-event\ncalculating event-wise score\n\n\n\nname = \"Irena Wilson\"\nsoup = get_event_list_html(name)\nevents = extract_events_from_html(soup)\n\n\nresults = [get_event_result(name, event_url) for _, event_url in events]\n\n\nfor (event_name, event_url), result in zip(events, results):\n    if result.placement:\n        print(f\"In {event_name}, {name.split()[0]} got {result.callbacks} callbacks and placed {result.placement} ({result.num_dances} dances)\")\n        print(f\"\\tscored {score_result(result)}\")\n    else:\n        print(f\"In {event_name}, {name.split()[0]} got {result.callbacks} callbacks ({result.num_dances} dances)\")\n        print(f\"\\tscored {score_result(result)}\")\n\nAmateur Collegiate Gold Standard\nAmateur Collegiate Silver Rhythm\nAmateur Collegiate Gold Rhythm\nAmateur Adult Silver Rhythm\nAmateur Collegiate Silver Standard\nAmateur Collegiate Silver Intl. Tango\nAmateur Collegiate All Syllabus Standard\nAmateur Adult Silver Intl. V. Waltz\nAmateur Adult Silver Standard\nAmateur Adult Silver Intl. Tango\nAmateur Collegiate Silver Smooth\nAmateur Adult Gold Smooth\nAmateur Collegiate Gold Smooth\nAmateur Adult Novice Smooth\nAmateur Adult Silver Latin\nAmateur Collegiate Silver Latin\nAmateur Collegiate Bronze Latin\nAmateur Adult Bronze 1 Latin\nAmateur Adult Bronze Latin\ndetected single-event\ncalculating event-wise score\nIn Amateur Adult Pre-Bronze Latin, Irena got 0 callbacks and placed 2.0 (2 dances)\n    scored 66.0\nIn Amateur Collegiate Bronze Rhythm, Irena got 3 callbacks and placed 6.0 (2 dances)\n    scored 67.0\nIn Amateur Collegiate Bronze 1 Rhythm, Irena got 3 callbacks and placed 4.0 (2 dances)\n    scored 71.0\nIn Amateur Adult Bronze Rhythm, Irena got 3 callbacks and placed 1.0 (2 dances)\n    scored 77.0\nIn Amateur Adult Bronze 1 Rhythm, Irena got 3 callbacks and placed 1.0 (2 dances)\n    scored 77.0\nIn Amateur Adult Bronze Standard, Irena got 3 callbacks and placed 6.0 (2 dances)\n    scored 67.0\nIn Amateur Adult Bronze 1 Standard, Irena got 3 callbacks and placed 6.0 (2 dances)\n    scored 67.0\nIn Amateur Adult Novice Standard, Irena got 2 callbacks and placed 5.0 (3 dances)\n    scored 96.0\nIn Amateur Adult Pre-Champ Standard, Irena got 1 callbacks and placed 7.0 (4 dances)\n    scored 115.0\nIn Amateur Collegiate Bronze Smooth, Irena got 3 callbacks and placed 7.0 (2 dances)\n    scored 65.0\nIn Amateur Collegiate Bronze 1 Smooth, Irena got 2 callbacks (1 dances)\n    scored 41\nIn Amateur Adult Bronze 1 Smooth, Irena got 3 callbacks and placed 1.0 (1 dances)\n    scored 43.0\nIn Amateur Adult Bronze Smooth, Irena got 3 callbacks and placed 3.0 (2 dances)\n    scored 73.0\n\n\n\nsum(score_result(result) for result in results)\n\nAmateur Collegiate Gold Standard\nAmateur Collegiate Silver Rhythm\nAmateur Collegiate Gold Rhythm\nAmateur Adult Silver Rhythm\nAmateur Collegiate Silver Standard\nAmateur Collegiate Silver Intl. Tango\nAmateur Collegiate All Syllabus Standard\nAmateur Adult Silver Intl. V. Waltz\nAmateur Adult Silver Standard\nAmateur Adult Silver Intl. Tango\nAmateur Collegiate Silver Smooth\nAmateur Adult Gold Smooth\nAmateur Collegiate Gold Smooth\nAmateur Adult Novice Smooth\nAmateur Adult Silver Latin\nAmateur Collegiate Silver Latin\nAmateur Collegiate Bronze Latin\nAmateur Adult Bronze 1 Latin\nAmateur Adult Bronze Latin\ndetected single-event\ncalculating event-wise score\n\n\n461.0\n\n\n\nfile_path = \"../data/roster.txt\"\n\nwith open(file_path, \"r\") as file:\n    names = file.readlines()\n\nnames = [name.strip() for name in names]\n\n\nevents_by_name = {name: extract_events_from_html(get_event_list_html(name)) for name in names}\n\n\nresults_by_name = {name: (events, [get_event_result(name, event_url) for _, event_url in events]) \n                   for name, events in events_by_name.items()}\n\n\nscore_by_name = {name: sum(score_result(result) for result in results) for name, (_, results) in results_by_name.items()}\n\nAmateur Collegiate Gold Standard\nAmateur Collegiate Silver Rhythm\nAmateur Collegiate Gold Rhythm\nAmateur Adult Silver Rhythm\nAmateur Collegiate Silver Standard\nAmateur Collegiate Silver Intl. Tango\nAmateur Collegiate All Syllabus Standard\nAmateur Adult Silver Intl. V. Waltz\nAmateur Adult Silver Standard\nAmateur Adult Silver Intl. Tango\nAmateur Collegiate Silver Smooth\nAmateur Adult Gold Smooth\nAmateur Collegiate Gold Smooth\nAmateur Adult Novice Smooth\nAmateur Adult Silver Latin\nAmateur Collegiate Silver Latin\nAmateur Collegiate Bronze Latin\nAmateur Adult Bronze 1 Latin\nAmateur Adult Bronze Latin\ndetected single-event\ncalculating event-wise score\n\n\n\nsorted_scores = sorted(score_by_name.items(), key=lambda x: x[1], reverse=True)\nfor name, score in sorted_scores:\n    print(f\"{name}: {score}\")\n\nEcho Nelson: 919.0\nCarmen Schultz: 820.5\nKhalid Ali: 809.5\nArmarion Julien: 708.0\nAquarina Hoanca: 602.0\nIrena Wilson: 600.0\nJack Orr: 552.0\nTessa Lundheim: 522.0\nDaniel Kindem: 427.0\nKourtney Muus: 355.0\nCas Wehring: 325.0\nBrody Schaffner: 292.0\nKeding Chen: 276.0\nAlena Ang: 270.0\nMei Abraham: 262.0\nAllison Jondahl: 201.0\nMaddie Shaheen: 183.0\nSasha Hydrie: 169.0\nConnor de Bruin: 168\nJoseph Jackson: 157.0\nEmma Nahr: 151.0\nAlexis Villapando: 150\nHailey Bargman: 148.0\nDaniel Han: 136.0\nOlesia Sarazhynskyy: 123.0\nPheng Xiong: 120.0\nElizabeth Wahl: 96.0\nSydney Goethel: 90\nHenry Jonas: 69\nMaya Lindvall: 69\nHelen Hoang: 66\nRyan Lynch: 54\nRachel Luban: 48\nVaibhav Jain: 45\nYadu Kiran: 42\nJeffrey Zhao: 36\nLev Ostrer: 30\n\n\n\nsum([score for (_, score) in score_by_name.items()])\n\n10091.0\n\n\nCR shy: this could be significantly sped up by caching events (especially since the vast majority of our dancers are in the same few events). Probably use autocaching in the gets.\n\nextra_names = [\"Jack Orr\",\n\"Brody Schaffner\",\n\"Jeffrey Zhao\",]\n\nfor name in extra_names:\n    events_by_name[name] = extract_events_from_html(get_event_list_html(name))\n    results_by_name[name] = (events, [get_event_result(name, event_url) for _, event_url in events_by_name[name]])\n    score_by_name[name] = sum(score_result(result) for result in results_by_name[name][1])\n    print(f\"{name}: {score_by_name[name]}\")\n\n\ndelete_names = ['Broderick Schaffner', 'Jeff Zhao']\nfor name in delete_names:\n    del score_by_name[name]\n    del results_by_name[name]\n    del events_by_name[name]"
  }
]