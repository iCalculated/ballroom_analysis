[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core (demo module)",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "core (demo module)"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ballroom_analysis",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "ballroom_analysis",
    "section": "Install",
    "text": "Install\npip install ballroom_analysis",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "ballroom_analysis",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "scoring.html",
    "href": "scoring.html",
    "title": "scoring",
    "section": "",
    "text": "source\n\nscore\n\n score (data)\n\n\n\n\nscore_result\n\n score_result (result:ballroom_analysis.scraping.Result)\n\n\n\n\nscore_placement\n\n score_placement (result:ballroom_analysis.scraping.Result)\n\n\n\n\nscore_callbacks\n\n score_callbacks (result:ballroom_analysis.scraping.Result)",
    "crumbs": [
      "scoring"
    ]
  },
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "ballroom_analysis",
    "section": "",
    "text": "SCORES = [30, 25, 20, 15, 10, 5, 0, 0]\nCALLBACK_VALUE = 3 \nINT = type(0)\n\ndef score(data):\n    # single-event\n    if type(data[0]) == INT:\n        print(\"detected single-event\")\n        data = [data]\n\n    # event-wise\n    if len(data[0]) == 3:\n        print(\"calculating event-wise score\")\n        return sum(SCORES[place-1] * mult + callbacks * 3 for (place, mult, callbacks) in data)\n    # matrix\n    else:\n        print(\"calculating overall score\")\n        placements, mults, callbacks = data\n        callback_contrib = (callbacks if type(callbacks) == INT else sum(callbacks)) * CALLBACK_VALUE \n        placement_contribs =  sum([SCORES[place - 1] * mult for (place, mult) in zip(placements, mults)])\n        return callback_contrib + placement_contribs\n\n\n\nscore([1,3,2])\n\ndetected single-event\ndetected event-wise data\n\n\n96\n\n\n\ntype(0)\n\ntype"
  },
  {
    "objectID": "scraping.html",
    "href": "scraping.html",
    "title": "scraping",
    "section": "",
    "text": "parse_event_name\n\n parse_event_name (event_name)\n\n\n\n\nEvent\n\n Event (division:str, level:str, event:str, number:int,\n        style:__main__.Style|None=None)\n\n\n\n\nStyle\n\n Style (value, names=None, module=None, qualname=None, type=None, start=1)\n\nAn enumeration.\n\n\n\nget_event_list_html\n\n get_event_list_html (name:str)\n\n\n\n\nget\n\n get (url, **kwargs)\n\n\n\n\nextract_events_from_html\n\n extract_events_from_html (soup:bs4.BeautifulSoup)\n\n\n\n\nResult\n\n Result (callbacks:int, placement:float|None, num_dances:int=1)\n\n\n\n\nextract_num_dances\n\n extract_num_dances (soup:bs4.BeautifulSoup)\n\n\n\n\nextract_placement\n\n extract_placement (soup:bs4.BeautifulSoup, name:str, verbose=False)\n\nassumes that soup is a finals page\n\n\n\nextract_max_callbacks\n\n extract_max_callbacks (soup:bs4.BeautifulSoup)\n\n\nurl = \"https://results.o2cm.com/scoresheet3.asp?event=usa24&heatid=40423019\"\nname = \"Khalid Ali\"\n\ninitial_res = get(url)\nsoup = BeautifulSoup(initial_res.content, \"html.parser\")\n\nextract_placement(soup, name)\n\n3.5\n\n\n\n\n\nget_event_result\n\n get_event_result (name:str, url:str)",
    "crumbs": [
      "scraping"
    ]
  },
  {
    "objectID": "scratch.html",
    "href": "scratch.html",
    "title": "Visualization!",
    "section": "",
    "text": "from tqdm import tqdm\nfrom ballroom_analysis.scoring import *\nfrom ballroom_analysis.scraping import *\n\n\nname = \"Larson Wells\"\nsoup = get_event_list_html(name)\nevents = extract_events_from_html(soup)\n\n\nresults = [get_event_result(name, event_url) for _, event_url in events]\n\n\nfor (event_name, event_url), result in zip(events, results):\n    if result.placement:\n        print(f\"In {event_name}, {name.split()[0]} got {result.callbacks} callbacks and placed {result.placement} ({result.num_dances} dances)\")\n        print(f\"\\tscored {score_result(result)}\")\n    else:\n        print(f\"In {event_name}, {name.split()[0]} got {result.callbacks} callbacks ({result.num_dances} dances)\")\n        print(f\"\\tscored {score_result(result)}\")\n\nIn Amateur Collegiate Gold Rhythm, Larson got 0 callbacks and placed 7.0 (4 dances)\n    scored 12.0\nIn Amateur Collegiate Silver Intl. Tango, Larson got 0 callbacks (1 dances)\n    scored 3\nIn Amateur Collegiate Silver Standard, Larson got 0 callbacks (3 dances)\n    scored 9\nIn Amateur Collegiate Silver Amer. Bolero, Larson got 1 callbacks (1 dances)\n    scored 6\nIn Amateur Collegiate Silver Rhythm, Larson got 1 callbacks (3 dances)\n    scored 18\nIn Amateur Collegiate Bronze 1 Latin, Larson got 3 callbacks and placed 1.0 (2 dances)\n    scored 84.0\nIn Amateur Collegiate Silver Latin, Larson got 2 callbacks and placed 2.0 (3 dances)\n    scored 102.0\nIn Amateur Adult All Syllabus Intl. Paso Doble, Larson got 1 callbacks and placed 1.0 (1 dances)\n    scored 36.0\n\n\n\nsum(score_result(result) for result in results)\n\n195.0\n\n\n\nfile_path = \"../data/roster.txt\"\n\nwith open(file_path, \"r\") as file:\n    names = file.readlines()\n\nnames = [name.strip() for name in names]\n\n\nevents_by_name, results_by_name, score_by_name = {}, {}, {}\n\nfor name in tqdm(names):\n    events_by_name[name] = extract_events_from_html(get_event_list_html(name))\n    results_by_name[name] = [get_event_result(name, event_url) for _, event_url in events_by_name[name]]\n    score_by_name[name] = sum(score_result(result) for result in results_by_name[name][1])\n\n\nsorted_scores = sorted(score_by_name.items(), key=lambda x: x[1], reverse=True)\nfor name, score in sorted_scores:\n    print(f\"{name}: {score}\")\n\nEcho Nelson: 919.0\nCarmen Schultz: 820.5\nKhalid Ali: 809.5\nArmarion Julien: 708.0\nAquarina Hoanca: 602.0\nIrena Wilson: 600.0\nJack Orr: 552.0\nTessa Lundheim: 522.0\nDaniel Kindem: 427.0\nKourtney Muus: 355.0\nCas Wehring: 325.0\nBrody Schaffner: 292.0\nKeding Chen: 276.0\nAlena Ang: 270.0\nMei Abraham: 262.0\nAllison Jondahl: 201.0\nMaddie Shaheen: 183.0\nSasha Hydrie: 169.0\nConnor de Bruin: 168\nJoseph Jackson: 157.0\nEmma Nahr: 151.0\nAlexis Villapando: 150\nHailey Bargman: 148.0\nDaniel Han: 136.0\nOlesia Sarazhynskyy: 123.0\nPheng Xiong: 120.0\nElizabeth Wahl: 96.0\nSydney Goethel: 90\nHenry Jonas: 69\nMaya Lindvall: 69\nHelen Hoang: 66\nRyan Lynch: 54\nRachel Luban: 48\nVaibhav Jain: 45\nYadu Kiran: 42\nJeffrey Zhao: 36\nLev Ostrer: 30\n\n\n\nsum([score for (_, score) in score_by_name.items()])\n\n10091.0\n\n\nCR shy: this could be significantly sped up by caching events (especially since the vast majority of our dancers are in the same few events). Probably use autocaching in the gets.\n\nextra_names = [\"Larson Wells\"]\n\nfor name in extra_names:\n    events_by_name[name] = extract_events_from_html(get_event_list_html(name))\n    results_by_name[name] = [get_event_result(name, event_url) for _, event_url in events_by_name[name]]\n    score_by_name[name] = sum(score_result(result) for result in results_by_name[name])\n    names.append(name)\n    print(f\"{name}: {score_by_name[name]}\")\n\nLarson Wells: 270.0\n\n\n\ndelete_names = ['Broderick Schaffner', 'Jeff Zhao']\nfor name in delete_names:\n    del score_by_name[name]\n    del results_by_name[name]\n    del events_by_name[name]\n    names.remove(name)\n\n\nfrom tqdm import tqdm\n\noverall_events = set()\nfor name in tqdm(names):\n    for event in events_by_name[name]:\n        overall_events.add(event)\n\n100%|██████████| 37/37 [00:00&lt;00:00, 76410.26it/s]\n\n\n\ndivisions = set()\nlevels = set()\nevent_names = set()\nfor event, _ in overall_events:\n    divisions.add(event.division)\n    levels.add(event.level)\n    event_names.add(event.event)\n\n\ndivisions\n\n{'Amateur Adult', 'Amateur Collegiate'}\n\n\n\nlevels\n\n{'All',\n 'Bronze',\n 'Bronze 1',\n 'Championship',\n 'Gold',\n 'Novice',\n 'Pre',\n 'Pre-Bronze',\n 'Pre-Champ',\n 'Silver'}\n\n\n\nevent_names\n\n{'Amer. Bolero',\n 'Bronze 1 Latin',\n 'Intl. Jive',\n 'Intl. Tango',\n 'Intl. V. Waltz',\n 'Latin',\n 'Rhythm',\n 'Smooth',\n 'Standard',\n 'Syllabus Intl. Paso Doble',\n 'Syllabus Standard'}\n\n\n\ndancer_info = {name: (events_by_name[name], results_by_name[name]) for name in names}\n\n\nimport pickle\nwith open(\"../data/dancer_info.pkl\", \"wb\") as file:\n    pickle.dump(dancer_info, file)\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_palette(\"pastel\")\nsns.set_style(\"darkgrid\")\n\n\nscores = {name: sum(score_result(result) for result in results) for name, (_, results) in dancer_info.items()}\nsorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)\nlabels = [name for name, _ in sorted_scores]\nvalues = [score for _, score in sorted_scores]\n\nexplosion = [0] * len(labels)\nexplosion[:7] = [0.05] * 7 # type: ignore\n\ncolors = sns.color_palette(\"pastel\")[:7]\ncolors.extend(['grey'] * (len(labels) - 7))  # type: ignore\n\ndef autopct(pct):\n    return ('%1.1f%%' % pct) if pct &gt;= 2 else ''\n\nplt.figure(figsize=(8, 8))\n\n_, _, autotexts = plt.pie(values, explode=explosion, labels=labels, colors=colors, autopct=autopct, rotatelabels=True) # type: ignore\n\nfor autotext in autotexts:\n    autotext.set_fontsize(8)  \n\nplt.show()\n\n\n\n\n\n\n\n\n\nimport seaborn as sns\n# Define the levels and their corresponding colors\nlevels = ['bronze', 'silver', 'gold', 'open']\ncolors = ['#CD7F32', 'silver', 'gold', 'cyan']\n\n# Get the points for each level\npoints = [points_by_level[level] for level in levels]\n\n# Create the bar chart using seaborn\nsns.barplot(x=levels, y=points, palette=colors)\n\n# Add labels and title\nplt.xlabel('Level')\nplt.ylabel('Points')\nplt.title('Points by Level')\n\n# Show the chart\nplt.show()\n\n/var/folders/69/x_h2tr715v9gpy1fjf2hypwh0000gn/T/ipykernel_2919/3243463817.py:10: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=levels, y=points, palette=colors)"
  }
]