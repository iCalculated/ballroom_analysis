[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core (demo module)",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "core (demo module)"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ballroom_analysis",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "ballroom_analysis",
    "section": "Install",
    "text": "Install\npip install ballroom_analysis",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "ballroom_analysis",
    "section": "How to use",
    "text": "How to use\nFill me in please! Donâ€™t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "scoring.html",
    "href": "scoring.html",
    "title": "scoring",
    "section": "",
    "text": "source\n\nscore\n\n score (data)",
    "crumbs": [
      "scoring"
    ]
  },
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "ballroom_analysis",
    "section": "",
    "text": "SCORES = [30, 25, 20, 15, 10, 5, 0, 0]\nCALLBACK_VALUE = 3 \nINT = type(0)\n\ndef score(data):\n    # single-event\n    if type(data[0]) == INT:\n        print(\"detected single-event\")\n        data = [data]\n\n    # event-wise\n    if len(data[0]) == 3:\n        print(\"calculating event-wise score\")\n        return sum(SCORES[place-1] * mult + callbacks * 3 for (place, mult, callbacks) in data)\n    # matrix\n    else:\n        print(\"calculating overall score\")\n        placements, mults, callbacks = data\n        callback_contrib = (callbacks if type(callbacks) == INT else sum(callbacks)) * CALLBACK_VALUE \n        placement_contribs =  sum([SCORES[place - 1] * mult for (place, mult) in zip(placements, mults)])\n        return callback_contrib + placement_contribs\n\n\n\nscore([1,3,2])\n\ndetected single-event\ndetected event-wise data\n\n\n96\n\n\n\ntype(0)\n\ntype"
  },
  {
    "objectID": "scraping.html",
    "href": "scraping.html",
    "title": "scraping",
    "section": "",
    "text": "parse_event_name\n\n parse_event_name (event_name)\n\n\n\n\nEvent\n\n Event (division:str, level:str, event:str, number:int)\n\n\n\n\nget_event_list_html\n\n get_event_list_html (name:str)\n\n\n\n\nget\n\n get (url, **kwargs)\n\n\n\n\nextract_events_from_html\n\n extract_events_from_html (soup:bs4.BeautifulSoup)\n\n\n\n\nResult\n\n Result (callbacks:int, placement:float|None)\n\n\n\n\nextract_placement\n\n extract_placement (soup:bs4.BeautifulSoup, name:str, verbose=False)\n\nassumes that soup is a finals page\n\n\n\nextract_max_callbacks\n\n extract_max_callbacks (soup:bs4.BeautifulSoup)\n\n\nurl = \"https://results.o2cm.com/scoresheet3.asp?event=usa24&heatid=40423019\"\nname = \"Khalid Ali\"\n\ninitial_res = get(url)\nsoup = BeautifulSoup(initial_res.content, \"html.parser\")\n\nextract_placement(soup, name)\n\n3.5\n\n\n\n\n\nget_event_result\n\n get_event_result (name:str, url:str)\n\n\nname = \"Tessa Lundheim\"\nsoup = get_event_list_html(name)\nevents = extract_events_from_html(soup)\n\n\nfor event_name, event_url in events:\n    try:\n        result = get_event_result(name, event_url)\n        if result.placement:\n            print(f\"In {event_name}, {name.split()[0]} got {result.callbacks} callbacks and placed {result.placement}\")\n        else:\n            print(f\"In {event_name}, {name.split()[0]} got {result.callbacks} callbacks\")\n    except:\n        print(f\"No result for {event_name}\")\n        continue\n\nIn Amateur Adult Pre-Bronze Latin, Tessa got 0 callbacks and placed 2.0\nIn Amateur Collegiate Bronze Rhythm, Tessa got 1 callbacks\nIn Amateur Collegiate Bronze 1 Rhythm, Tessa got 1 callbacks\nIn Amateur Adult Bronze Rhythm, Tessa got 3 callbacks and placed 1.0\nIn Amateur Adult Bronze 1 Rhythm, Tessa got 3 callbacks and placed 1.0\nIn Amateur Collegiate Bronze Standard, Tessa got 1 callbacks\nIn Amateur Collegiate Bronze 1 Standard, Tessa got 2 callbacks\nIn Amateur Adult Bronze Standard, Tessa got 3 callbacks and placed 6.0\nIn Amateur Adult Bronze 1 Standard, Tessa got 3 callbacks and placed 6.0\nIn Amateur Collegiate Bronze Smooth, Tessa got 1 callbacks\nIn Amateur Collegiate Bronze 1 Smooth, Tessa got 1 callbacks\nIn Amateur Adult Bronze 1 Smooth, Tessa got 3 callbacks and placed 1.0\nIn Amateur Adult Bronze Smooth, Tessa got 3 callbacks and placed 3.0\nIn Amateur Collegiate Pre-Bronze Latin, Tessa got 1 callbacks and placed 3.0",
    "crumbs": [
      "scraping"
    ]
  }
]