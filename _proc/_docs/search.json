[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core (demo module)",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "core (demo module)"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ballroom_analysis",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "ballroom_analysis",
    "section": "Install",
    "text": "Install\npip install ballroom_analysis",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "ballroom_analysis",
    "section": "How to use",
    "text": "How to use\nFill me in please! Donâ€™t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "ballroom_analysis"
    ]
  },
  {
    "objectID": "scoring.html",
    "href": "scoring.html",
    "title": "scoring",
    "section": "",
    "text": "source\n\nscore\n\n score (data)",
    "crumbs": [
      "scoring"
    ]
  },
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "ballroom_analysis",
    "section": "",
    "text": "SCORES = [30, 25, 20, 15, 10, 5, 0, 0]\nCALLBACK_VALUE = 3 \nINT = type(0)\n\ndef score(data):\n    # single-event\n    if type(data[0]) == INT:\n        print(\"detected single-event\")\n        data = [data]\n\n    # event-wise\n    if len(data[0]) == 3:\n        print(\"calculating event-wise score\")\n        return sum(SCORES[place-1] * mult + callbacks * 3 for (place, mult, callbacks) in data)\n    # matrix\n    else:\n        print(\"calculating overall score\")\n        placements, mults, callbacks = data\n        callback_contrib = (callbacks if type(callbacks) == INT else sum(callbacks)) * CALLBACK_VALUE \n        placement_contribs =  sum([SCORES[place - 1] * mult for (place, mult) in zip(placements, mults)])\n        return callback_contrib + placement_contribs\n\n\n\nscore([1,3,2])\n\ndetected single-event\ndetected event-wise data\n\n\n96\n\n\n\ntype(0)\n\ntype"
  },
  {
    "objectID": "scraping.html",
    "href": "scraping.html",
    "title": "scraping",
    "section": "",
    "text": "get_event_html\n\n get_event_html (name:str)\n\n\n\n\nextract_events_from_html\n\n extract_events_from_html (soup:bs4.BeautifulSoup)\n\n\n\n\nResult\n\n Result (callbacks:int, placement:float|None)\n\n\n\n\nextract_placement\n\n extract_placement (soup:bs4.BeautifulSoup, name:str, verbose=False)\n\nassumes that soup is a finals page\n\n\n\nextract_max_callbacks\n\n extract_max_callbacks (soup:bs4.BeautifulSoup)\n\n\nurl = \"https://results.o2cm.com/scoresheet3.asp?event=usa24&heatid=40423019\"\nname = \"Khalid Ali\"\n\ninitial_res = requests.get(url, headers=headers)\nsoup = BeautifulSoup(initial_res.content, \"html.parser\")\n\nextract_placement(soup, name)\n\nFound 528 associated with Khalid Ali\n\n\n3.5\n\n\n\n\n\nget_event_result\n\n get_event_result (name:str, url:str)\n\n\nurl = \"https://results.o2cm.com/scoresheet3.asp\"\ndata = {\n    \"heatid\": \"40423019\",  # Hidden input for the specific heat\n    \"event\": \"usa24\",      # Hidden input for the specific event\n    \"selCount\": \"1\"        # Dropdown selection for Semi-Final\n}\n\n# Send the POST request\nresponse = requests.post(url, data=data)\n\n# Process the response with BeautifulSoup or another tool if needed\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n\nname = \"Carmen Schultz\"\nif name in soup.get_text():\n    print(f\"{name} is in the results\")\nelse:\n    print(f\"{name} is not in the results\")\n\nCarmen Schultz is in the results\n\n\n\nsoup = get_event_html(\"Khalid Ali\")\nevents = extract_events_from_html(soup)\n\n\nfor event_name, event_url in events:\n    try:\n        result = get_event_result(\"Khalid Ali\", event_url)\n        print(f\"In `{event_name}`, Khalid got {result.callbacks} callbacks and placed {result.placement}\")\n    except:\n        print(f\"No result for {event_name}\")\n        continue\n\nNo result for 9) Amateur Collegiate Gold Standard\nNo result for 19) Amateur Collegiate Silver Rhythm\nIn `4) Amateur Collegiate Gold Rhythm`, Khalid got 0 callbacks and placed 6.0\nNo result for 10) Amateur Adult Silver Rhythm\nIn `2) Amateur Collegiate Silver Standard`, Khalid got 2 callbacks and placed 2.0\nIn `3) Amateur Collegiate Silver Intl. Tango`, Khalid got 2 callbacks and placed 3.0\nIn `4) Amateur Collegiate All Syllabus Standard`, Khalid got 2 callbacks and placed 4.0\nNo result for 10) Amateur Adult Silver Intl. V. Waltz\nIn `3) Amateur Adult Silver Standard`, Khalid got 2 callbacks and placed 3.0\nIn `3) Amateur Adult Silver Intl. Tango`, Khalid got 2 callbacks and placed 3.5\nNo result for 11) Amateur Collegiate Silver Smooth\nIn `2) Amateur Adult Gold Smooth`, Khalid got 2 callbacks and placed 2.0\nIn `1) Amateur Collegiate Gold Smooth`, Khalid got 1 callbacks and placed 1.0\nIn `6) Amateur Adult Novice Smooth`, Khalid got 2 callbacks and placed 3.0\nNo result for 23) Amateur Adult Silver Latin\nNo result for 9) Amateur Collegiate Silver Latin\nNo result for 8) Amateur Collegiate Bronze Latin\nNo result for 15) Amateur Adult Bronze 1 Latin\nNo result for 8) Amateur Adult Bronze Latin\n\n\n\n\n\nparse_event_name\n\n parse_event_name (event_name)\n\n\n\n\nEvent\n\n Event (division:str, level:str, event:str, number:int)",
    "crumbs": [
      "scraping"
    ]
  }
]